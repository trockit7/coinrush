/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BondingCurvePoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEAD"
      | "STARTER_ENABLED"
      | "antiWhaleBlocks"
      | "buy"
      | "buyFor"
      | "creationBlock"
      | "creationTime"
      | "creator"
      | "creatorFeeBps"
      | "creatorFirstBuyCapBps"
      | "currentPlatformFeeBps"
      | "debugSignature"
      | "earlyWindowSecs"
      | "escrowBnb"
      | "factory"
      | "firstBuyDone"
      | "graduate"
      | "initTokenReserve"
      | "initialized"
      | "isMigrated"
      | "lastTradePriceWei"
      | "marketCapWei"
      | "maxBnbPerTxWei"
      | "maxBnbPerWalletWei"
      | "migrate"
      | "migrated"
      | "minBuyWei"
      | "minEarlyBnb"
      | "minLiqBnbWei"
      | "openPublic"
      | "owner"
      | "p0WeiPerToken"
      | "platform"
      | "platformFeeBps"
      | "platformTreasury"
      | "priceWeiPerToken"
      | "publicBuyCapBps"
      | "renounceOwnership"
      | "reserveNative"
      | "reserveToken"
      | "sell"
      | "setEarlyBuyParams"
      | "spentBnb"
      | "starterSold"
      | "starterTrancheTokens"
      | "targetMarketCapWei"
      | "token"
      | "transferOwnership"
      | "x0"
      | "y0"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Buy"
      | "EarlyBuyParamsUpdated"
      | "Migrated"
      | "OwnershipTransferred"
      | "Seeded"
      | "Sell"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DEAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "STARTER_ENABLED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "antiWhaleBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buyFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creatorFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorFirstBuyCapBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlatformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debugSignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWindowSecs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrowBnb", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstBuyDone",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graduate",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initTokenReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTradePriceWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketCapWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBnbPerTxWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBnbPerWalletWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "migrated", values?: undefined): string;
  encodeFunctionData(functionFragment: "minBuyWei", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minEarlyBnb",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiqBnbWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPublic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "p0WeiPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceWeiPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicBuyCapBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyBuyParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spentBnb",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "starterSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "starterTrancheTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetMarketCapWei",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "x0", values?: undefined): string;
  encodeFunctionData(functionFragment: "y0", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DEAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STARTER_ENABLED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "antiWhaleBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorFirstBuyCapBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPlatformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debugSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyWindowSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrowBnb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstBuyDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "graduate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initTokenReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMigrated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTradePriceWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCapWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBnbPerTxWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBnbPerWalletWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minBuyWei", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minEarlyBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiqBnbWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openPublic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "p0WeiPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceWeiPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicBuyCapBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyBuyParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spentBnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "starterSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starterTrancheTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetMarketCapWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y0", data: BytesLike): Result;
}

export namespace BuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    bnbIn: BigNumberish,
    tokensOut: BigNumberish,
    priceWeiPerToken: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    bnbIn: bigint,
    tokensOut: bigint,
    priceWeiPerToken: bigint
  ];
  export interface OutputObject {
    buyer: string;
    bnbIn: bigint;
    tokensOut: bigint;
    priceWeiPerToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarlyBuyParamsUpdatedEvent {
  export type InputTuple = [
    minEarlyBnb: BigNumberish,
    earlyWindowSecs: BigNumberish
  ];
  export type OutputTuple = [minEarlyBnb: bigint, earlyWindowSecs: bigint];
  export interface OutputObject {
    minEarlyBnb: bigint;
    earlyWindowSecs: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigratedEvent {
  export type InputTuple = [
    router: AddressLike,
    bnbUsed: BigNumberish,
    tokenUsed: BigNumberish,
    lpOut: BigNumberish
  ];
  export type OutputTuple = [
    router: string,
    bnbUsed: bigint,
    tokenUsed: bigint,
    lpOut: bigint
  ];
  export interface OutputObject {
    router: string;
    bnbUsed: bigint;
    tokenUsed: bigint;
    lpOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeededEvent {
  export type InputTuple = [amountBNB: BigNumberish];
  export type OutputTuple = [amountBNB: bigint];
  export interface OutputObject {
    amountBNB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellEvent {
  export type InputTuple = [
    seller: AddressLike,
    tokenIn: BigNumberish,
    bnbOut: BigNumberish,
    priceWeiPerToken: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    tokenIn: bigint,
    bnbOut: bigint,
    priceWeiPerToken: bigint
  ];
  export interface OutputObject {
    seller: string;
    tokenIn: bigint;
    bnbOut: bigint;
    priceWeiPerToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BondingCurvePool extends BaseContract {
  connect(runner?: ContractRunner | null): BondingCurvePool;
  waitForDeployment(): Promise<this>;

  interface: BondingCurvePoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEAD: TypedContractMethod<[], [string], "view">;

  STARTER_ENABLED: TypedContractMethod<[], [boolean], "view">;

  antiWhaleBlocks: TypedContractMethod<[], [bigint], "view">;

  buy: TypedContractMethod<[minTokensOut: BigNumberish], [bigint], "payable">;

  buyFor: TypedContractMethod<
    [to: AddressLike, minTokensOut: BigNumberish],
    [bigint],
    "payable"
  >;

  creationBlock: TypedContractMethod<[], [bigint], "view">;

  creationTime: TypedContractMethod<[], [bigint], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  creatorFeeBps: TypedContractMethod<[], [bigint], "view">;

  creatorFirstBuyCapBps: TypedContractMethod<[], [bigint], "view">;

  currentPlatformFeeBps: TypedContractMethod<[], [bigint], "view">;

  debugSignature: TypedContractMethod<[], [string], "view">;

  earlyWindowSecs: TypedContractMethod<[], [bigint], "view">;

  escrowBnb: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  firstBuyDone: TypedContractMethod<[], [boolean], "view">;

  graduate: TypedContractMethod<
    [
      router: AddressLike,
      minTokens: BigNumberish,
      minBNB: BigNumberish,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amtToken: bigint;
        amtBNB: bigint;
        lpOut: bigint;
      }
    ],
    "nonpayable"
  >;

  initTokenReserve: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialized: TypedContractMethod<[], [boolean], "view">;

  isMigrated: TypedContractMethod<[], [boolean], "view">;

  lastTradePriceWei: TypedContractMethod<[], [bigint], "view">;

  marketCapWei: TypedContractMethod<[], [bigint], "view">;

  maxBnbPerTxWei: TypedContractMethod<[], [bigint], "view">;

  maxBnbPerWalletWei: TypedContractMethod<[], [bigint], "view">;

  migrate: TypedContractMethod<
    [router: AddressLike, lpRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  migrated: TypedContractMethod<[], [boolean], "view">;

  minBuyWei: TypedContractMethod<[], [bigint], "view">;

  minEarlyBnb: TypedContractMethod<[], [bigint], "view">;

  minLiqBnbWei: TypedContractMethod<[], [bigint], "view">;

  openPublic: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  p0WeiPerToken: TypedContractMethod<[], [bigint], "view">;

  platform: TypedContractMethod<[], [string], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  platformTreasury: TypedContractMethod<[], [string], "view">;

  priceWeiPerToken: TypedContractMethod<[], [bigint], "view">;

  publicBuyCapBps: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reserveNative: TypedContractMethod<[], [bigint], "view">;

  reserveToken: TypedContractMethod<[], [bigint], "view">;

  sell: TypedContractMethod<
    [tokensIn: BigNumberish, minBnbOut: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEarlyBuyParams: TypedContractMethod<
    [_minEarlyBnb: BigNumberish, _earlyWindowSecs: BigNumberish],
    [void],
    "nonpayable"
  >;

  spentBnb: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  starterSold: TypedContractMethod<[], [bigint], "view">;

  starterTrancheTokens: TypedContractMethod<[], [bigint], "view">;

  targetMarketCapWei: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  x0: TypedContractMethod<[], [bigint], "view">;

  y0: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEAD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STARTER_ENABLED"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "antiWhaleBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[minTokensOut: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "buyFor"
  ): TypedContractMethod<
    [to: AddressLike, minTokensOut: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creatorFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creatorFirstBuyCapBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentPlatformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "debugSignature"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "earlyWindowSecs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrowBnb"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "firstBuyDone"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "graduate"
  ): TypedContractMethod<
    [
      router: AddressLike,
      minTokens: BigNumberish,
      minBNB: BigNumberish,
      deadline: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amtToken: bigint;
        amtBNB: bigint;
        lpOut: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initTokenReserve"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMigrated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastTradePriceWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketCapWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxBnbPerTxWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxBnbPerWalletWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<
    [router: AddressLike, lpRecipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minBuyWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minEarlyBnb"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minLiqBnbWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openPublic"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "p0WeiPerToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platform"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceWeiPerToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publicBuyCapBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reserveNative"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserveToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [tokensIn: BigNumberish, minBnbOut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEarlyBuyParams"
  ): TypedContractMethod<
    [_minEarlyBnb: BigNumberish, _earlyWindowSecs: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spentBnb"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "starterSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "starterTrancheTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetMarketCapWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "x0"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "y0"): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Buy"
  ): TypedContractEvent<
    BuyEvent.InputTuple,
    BuyEvent.OutputTuple,
    BuyEvent.OutputObject
  >;
  getEvent(
    key: "EarlyBuyParamsUpdated"
  ): TypedContractEvent<
    EarlyBuyParamsUpdatedEvent.InputTuple,
    EarlyBuyParamsUpdatedEvent.OutputTuple,
    EarlyBuyParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Migrated"
  ): TypedContractEvent<
    MigratedEvent.InputTuple,
    MigratedEvent.OutputTuple,
    MigratedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Seeded"
  ): TypedContractEvent<
    SeededEvent.InputTuple,
    SeededEvent.OutputTuple,
    SeededEvent.OutputObject
  >;
  getEvent(
    key: "Sell"
  ): TypedContractEvent<
    SellEvent.InputTuple,
    SellEvent.OutputTuple,
    SellEvent.OutputObject
  >;

  filters: {
    "Buy(address,uint256,uint256,uint256)": TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;
    Buy: TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;

    "EarlyBuyParamsUpdated(uint256,uint256)": TypedContractEvent<
      EarlyBuyParamsUpdatedEvent.InputTuple,
      EarlyBuyParamsUpdatedEvent.OutputTuple,
      EarlyBuyParamsUpdatedEvent.OutputObject
    >;
    EarlyBuyParamsUpdated: TypedContractEvent<
      EarlyBuyParamsUpdatedEvent.InputTuple,
      EarlyBuyParamsUpdatedEvent.OutputTuple,
      EarlyBuyParamsUpdatedEvent.OutputObject
    >;

    "Migrated(address,uint256,uint256,uint256)": TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;
    Migrated: TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Seeded(uint256)": TypedContractEvent<
      SeededEvent.InputTuple,
      SeededEvent.OutputTuple,
      SeededEvent.OutputObject
    >;
    Seeded: TypedContractEvent<
      SeededEvent.InputTuple,
      SeededEvent.OutputTuple,
      SeededEvent.OutputObject
    >;

    "Sell(address,uint256,uint256,uint256)": TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;
    Sell: TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;
  };
}
